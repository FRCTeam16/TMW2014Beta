// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#ifndef SHOOTER_H
#define SHOOTER_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../CamPIDOut.h"
#include "../BSTimer.h"
#include "ctre\CANTalonSRX.h"
//#include "ResetCams.h"
/**
 *
 *
 * @author ExampleAuthor
 */
class Shooter: public Subsystem {
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	CanTalonSRX* camLeft;
	CanTalonSRX* camRight;
	AnalogInput* camPos;
	AnalogInput* backupCamPos;
	Solenoid* fingers;
	DigitalInput* ballNotPresent;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//	ResetCams resetCams;
	Shooter();
	void InitDefaultCommand();
	void CamChecker();
	void Fire(float delay, bool resetBeaterBar);
	bool GetFiring();
	float GetCorrectedCamPos();
	void RunCams(float output, bool forceRun);
	bool GetCamPosStatus();
	bool GetBackupCamPosStatus();
	void Reset();
	void RelieveStress();
	void SetCamOffsets(float primaryCamOffset, float backupCamOffset);
	bool GetStressReliefComplete();
	bool GetResetCamComplete();
	void SetResetCamComplete(bool value);
	void SetFireFlag(bool value);
	void SetFireDelayFlag (bool value);
	
private:
	bool fireFlag;
	float fireSetpoint;
	float camPosOffset;
	float backupCamPosOffset;
	float CorrectVoltage(float setpoint);
	BSTimer* fireDelayTimer;
	BSTimer* fireTimer;
	bool fireDelayFlag;
	float fireDelay;
	bool camPosStatus;
	bool backupCamPosStatus;
	float previousCamPos;
	float previousBackupCamPos;
	bool resetBeaterBar;
	float stressReliefSetpoint;
	bool stressReliefComplete;
	bool resetCamComplete;
	float stage1Setpoint;
};
#endif
